
@using TryKnockout.ViewModels;
@model ResultList<AuthorViewModel>

@{
    ViewBag.Title = "Index";
    var queryOptions = Model.QueryOptions;
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create", null, new { @class = "btn btn-primary" })
</p>
<div style="display:none" data-bind="visible: pagingService.entities().length > 0">
    <table class="table table-bordered table-striped">
        <tr>
            <th>@Html.BuildKnockoutSortableLink("First Name", "Index", "firstName")</th>
            <th>@Html.BuildKnockoutSortableLink("Last Name", "Index", "lastName")</th>
            <th>@Html.BuildKnockoutSortableLink("Biography", "Index", "biography")</th>
            <th>Actions</th>
        </tr>
        <tbody data-bind="foreach: pagingService.entities">
            <tr>
                <td data-bind="text: firstName"></td>
                <td data-bind="text: lastName"></td>
                <td data-bind="text: biography"></td>
                <td>
                    <a data-bind="attr: {href:'@Url.Action("Details")/'+id }"
                       class="btn btn-info">Details</a>
                    <a data-bind="attr: {href:'@Url.Action("Edit")/'+id }"
                       class="btn btn-primary">Edit</a>
                    <a data-bind="click: $parent.showDeleteModal, attr: {href:'@Url.Action("Delete")/'+id }"
                       class="btn btn-danger">Delete</a>
                </td>
            </tr>
        </tbody>
    </table>
    @Html.BuildKnockoutNextPreviousLinks("Index")
</div>
<div class="alert alert-warning alert-dismissable" role="alert" style="display:none" data-bind="visible: pagingService.entities().length == 0">
    <button type="button" class="close" data-dismiss="alert">
        <span aria-hidden="true">&times;</span>
        <span class="sr-only">Close</span>
    </button>
    There are no authors to diplay. Click @Html.ActionLink("here", "Create") to create one now.
</div>
@section Scripts {
    
    <script>
        var viewModel = new AuthorIndexViewModel(@Html.HtmlConvertToJson(Model));
        ko.applyBindings(viewModel);
    </script>
}